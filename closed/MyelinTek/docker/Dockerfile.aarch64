# Copyright (c) 2018-2021, NVIDIA CORPORATION. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

ARG BASE_IMAGE
FROM ${BASE_IMAGE}

SHELL ["/bin/bash", "-c"]

ARG CUDA_VER=11.3

# Install core packages
RUN apt update \
 && apt install -y --no-install-recommends build-essential autoconf libtool git \
        ccache curl wget pkg-config sudo ca-certificates automake libssl-dev \
        bc python3-dev python3-pip google-perftools gdb libglib2.0-dev clang sshfs libre2-dev \
        libboost-dev libnuma-dev numactl sysstat sshpass ntpdate less vim iputils-ping \
 && apt remove -y cmake \
 && apt remove -y libgflags-dev \
 && apt remove -y libprotobuf-dev \
 && apt -y autoremove
RUN apt install -y --no-install-recommends pkg-config zip g++ zlib1g-dev unzip

RUN DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends cmake

# For pillow
RUN apt-get install -y --no-install-recommends libjpeg-dev zlib1g-dev

# Install dependencies needed for RNN-T preprocessing
RUN apt-get update && apt-get install -y sox llvm llvm-dev

# Needed by official RNNT accuracy script
RUN apt install -y --no-install-recommends libsndfile1-dev

# Install rapidJSON, needed by Triton
RUN apt install rapidjson-dev

# For onnx
RUN apt-get install -y --no-install-recommends protobuf-compiler libprotoc-dev

# For h5py
RUN apt-get install -y libhdf5-serial-dev hdf5-tools

COPY requirements.aarch64 /tmp
WORKDIR /tmp

RUN python3 -m pip install --upgrade pip \
 && python3 -m pip install --upgrade setuptools wheel virtualenv Cython==0.29.23 \
 && python3 -m pip install -r requirements.aarch64 \
 && python3 -m pip install apex@git+git://github.com/nvidia/apex@d06404fecab73f152c6cbb89ac2c2e9b7fc24124 \
 && python3 -m pip install uff==0.6.9 graphsurgeon==0.4.5 onnx-graphsurgeon==0.3.9

# Install HuggingFace Transformers
RUN curl https://sh.rustup.rs -sSf | sh -s -- -y \
 && export PATH=$HOME/.cargo/bin:$PATH \
 && python3 -m pip install transformers==4.6.0

# install gflags
# -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=ON -DBUILD_gflags_LIB=ON .. \
RUN git clone -b v2.2.1 https://github.com/gflags/gflags.git \
 && cd gflags \
 && mkdir build && cd build \
 && cmake -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=ON -DBUILD_gflags_LIB=ON .. \
 && make -j \
 && make install \
 && cd /tmp && rm -rf gflags

# install glog
RUN git clone -b v0.3.5 https://github.com/google/glog.git \
 && cd glog \
 && cmake -H. -Bbuild -G "Unix Makefiles" -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=ON \
 && cmake --build build \
 && cmake --build build --target install \
 && cd /tmp && rm -rf glog

# Install CUB, needed by NMS OPT plugin
RUN wget https://github.com/NVlabs/cub/archive/1.8.0.zip -O cub-1.8.0.zip \
 && unzip cub-1.8.0.zip \
 && mv cub-1.8.0/cub /usr/include/aarch64-linux-gnu/ \
 && rm -rf cub-1.8.0.zip cub-1.8.0

# Install libjemalloc2
RUN echo 'deb [arch=aarch64] http://archive.ubuntu.com/ubuntu focal main restricted universe multiverse' | tee -a /etc/apt/sources.list.d/focal.list \
  && echo 'Package: *\nPin: release a=focal\nPin-Priority: -10\n' | tee -a /etc/apt/preferences.d/focal.pref \
  && apt update \
  && apt install --no-install-recommends -t focal -y libjemalloc2 libtcmalloc-minimal4

# Install cudnn 8.2.1.32 to match TensorRT rel-8.0
ARG CUDNN_DEB_URL=https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/sbsa/
RUN cd /tmp \
 && install_deb_pkg() { wget $CUDNN_DEB_URL/$1 -O $1 && dpkg -i $1 && rm $1; } \
 && install_deb_pkg libcudnn8_8.2.1.32-1+cuda11.3_arm64.deb \
 && install_deb_pkg libcudnn8-dev_8.2.1.32-1+cuda11.3_arm64.deb \
 && unset -f install_deb_pkg

# Remove the default TRT 7.2 installation in the cudnn container
RUN rm -rf /usr/local/lib/python3.8/dist-packages/tensorrt/

# Install TRT 8.0.2
ARG TRT_DEB_URL=https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/sbsa/
RUN cd /tmp \
    && install_deb_pkg() { wget $TRT_DEB_URL/$1 -O $1 && dpkg -i $1 && rm $1; } \
    && install_deb_pkg libnvinfer8_8.0.2-1+cuda11.3_arm64.deb \
    && install_deb_pkg libnvinfer-dev_8.0.2-1+cuda11.3_arm64.deb \
    && install_deb_pkg libnvinfer-plugin8_8.0.2-1+cuda11.3_arm64.deb \
    && install_deb_pkg libnvinfer-plugin-dev_8.0.2-1+cuda11.3_arm64.deb \
    && install_deb_pkg libnvparsers8_8.0.2-1+cuda11.3_arm64.deb \
    && install_deb_pkg libnvparsers-dev_8.0.2-1+cuda11.3_arm64.deb \
    && install_deb_pkg libnvonnxparsers8_8.0.2-1+cuda11.3_arm64.deb \
    && install_deb_pkg libnvonnxparsers-dev_8.0.2-1+cuda11.3_arm64.deb \
    && install_deb_pkg python3-libnvinfer_8.0.2-1+cuda11.3_arm64.deb \
    && install_deb_pkg python3-libnvinfer-dev_8.0.2-1+cuda11.3_arm64.deb \
    && unset -f install_deb_pkg

# With latest Ubuntu:20.04 container, there will be no 'python' or 'pip' even if we have installed 'python3' and
# 'python3-pip'. So add softlink to avoid wheel installation failure.
RUN ln -sf /usr/bin/python3 /usr/bin/python
RUN ln -sf /usr/bin/pip3 /usr/bin/pip

WORKDIR /work
